---
title: "Day 1"
author: "Josef Fruehwald"
date: 2022-12-1
editor: visual
categories:
  - "R"
  - "tidyverse"
  - "`|>`"
image: "2022-12-1_files/figure-html/fig-cal-order-1.png"
---

Source: <https://adventofcode.com/2022/day/1>

# Part 1

## Puzzle Text

> ## \-\-- Day 1: Calorie Counting \-\--
>
> Santa's reindeer \[...\]
>
> The Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they've brought with them, one item per line. Each Elf separates their own inventory from the previous Elf's inventory (if any) by a blank line.
>
> For example, suppose the Elves finish writing their items' Calories and end up with the following list:
>
>     1000 
>     2000 
>     3000
>
>     4000
>
>     5000 
>     6000
>
>     7000 
>     8000 
>     9000
>
>     10000
>
> This list represents the Calories of the food carried by five Elves:

> -   The first Elf is carrying food with `1000`, `2000`, and `3000` Calories, a total of *`6000`* Calories.
>
> <!-- -->
>
> -   The second Elf is carrying one food item with *`4000`* Calories.
>
> <!-- -->
>
> -   The third Elf is carrying food with `5000` and `6000` Calories, a total of *`11000`* Calories.
>
> -   The fourth Elf is carrying food with `7000`, `8000`, and `9000` Calories, a total of *`24000`* Calories.
>
> -   The fifth Elf is carrying one food item with *`10000`* Calories.
>
> In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they'd like to know how many Calories are being carried by the Elf carrying the *most* Calories. In the example above, this is *`24000`* (carried by the fourth Elf).
>
> Find the Elf carrying the most Calories. *How many total Calories is that Elf carrying?*

## R Session Info

```{r}
#| label: "session info"
sessionInfo()
```

```{r}
#| label: loads
library(tidyverse)
library(knitr)
library(kableExtra)
```

## Loading Data

First attempts at `read_csv()` were problematic because blank lines were ignored. `skip_empty_rows = TRUE` by default.

```{r}
#| label: read input
calories <- 
  read_csv(
    "2022-12-1_assets/input.txt", 
    col_names = FALSE,
    skip_empty_rows = FALSE
    )
```

Double checking there are enough NAs.

```{r}
calories |>
  count(is.na(X1)) |>
  kbl() |>
  kable_styling(full_width = FALSE)
```

## Strategy

I'll identify the rows with `NA` and fill them with the row index. Then fill downward. I'll need a special rule for the first row.

```{r}
calories |>
  ## a unique id for each elf.
  ## won't increment by 1, but will be unique
  mutate(
    row_idx = 1:n(),
    elf_id = case_when(
      is.na(X1) ~ row_idx,  
      row_idx == 1 ~ row_idx
    )
  ) |>
  ## fill in the elf id for all rows
  fill(elf_id) |>
  ## drop na values for summarising
  drop_na() |>
  ## group_by, summarise, arrange
  group_by(elf_id) |>
  summarise(total_calories = sum(X1)) |>
  arrange(desc(total_calories)) |>
  ## pull the top number 
  slice(1) |>
  pull(total_calories)
```

# Part 2

Same as before, but now the sum of the top three. Maybe I should've done some intermediate assignment, but oh well, here's the block again, this time with the first three.

```{r}
calories |>
  ## a unique id for each elf.
  ## won't increment by 1, but will be unique
  mutate(
    row_idx = 1:n(),
    elf_id = case_when(
      is.na(X1) ~ row_idx,  
      row_idx == 1 ~ row_idx
    )
  ) |>
  ## fill in the elf id for all rows
  fill(elf_id) |>
  ## drop na values for summarising
  drop_na() |>
  ## group_by, summarise, arrange
  group_by(elf_id) |>
  summarise(total_calories = sum(X1)) |>
  arrange(desc(total_calories)) |>
  ## pull the top three
  slice(1:3) |>
  pull(total_calories) |>
  ## sum up
  sum()
```

## Just for fun

```{r}
library(showtext)
library(ggdark)
library(scales)
library(khroma)

font_add_google(name = "Mountains of Christmas", family = "christmas")
showtext_auto()
```

```{r}
total_calories <- 
  calories |>
    ## a unique id for each elf.
    ## won't increment by 1, but will be unique
    mutate(
      row_idx = 1:n(),
      elf_id = case_when(
        is.na(X1) ~ row_idx,  
        row_idx == 1 ~ row_idx
      )
    ) |>
    ## fill in the elf id for all rows
    fill(elf_id) |>
    ## drop na values for summarising
    drop_na() |>
    ## group_by, summarise, arrange
    group_by(elf_id) |>
    summarise(total_calories = sum(X1)) |>
    arrange(desc(total_calories)) |>
    mutate(rank = 1:n())
```

```{r}
#| label: fig-cal-rank
#| fig-width: 5
#| fig-height: 5
#| fig-align: center
#| fig-cap: total calories by rank
#| message: false

total_calories |>
  ggplot(aes(rank, total_calories)) + 
    geom_point()+
    scale_x_continuous(labels = label_comma())+
    scale_y_continuous(labels = label_comma())+
    labs(title = "Total calories per elf")+
    dark_theme_gray()+
    theme(title = element_text(family = "christmas", size = 20))
```

```{r}
#| label: fig-cal-order
#| fig-width: 6
#| fig-height: 5
#| fig-align: center
#| fig-cap: total calories by order
#| message: false

total_calories |>
  arrange(elf_id) |>
  mutate(elf_order = 1:n()) |>
  ggplot(aes(elf_order, total_calories, color = rank)) + 
    geom_point()+
    scale_x_continuous(labels = label_comma())+
    scale_y_continuous(labels = label_comma())+
    scale_color_oslo(reverse = TRUE) +
    guides(colour = guide_colourbar(reverse = TRUE))+
    labs(title = "Total calories per elf")+
    dark_theme_gray()+
    theme(title = element_text(family = "christmas", size = 20))
```
